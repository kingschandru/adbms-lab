CREATE TABLE Instructor (
  ID INTEGER PRIMARY KEY,
  name TEXT ,
  dept_name TEXT ,
  salary INTEGER
);

-- insert
INSERT INTO Instructor VALUES (0001, 'sukindar Sing', 'History', 100000);
INSERT INTO Instructor VALUES (0002, 'akash', 'History', 90000);
INSERT INTO Instructor VALUES (0003, 'sridar', 'Physics', 90000);
INSERT INTO Instructor VALUES (0004, 'monish', 'Chemistry', 80000);
INSERT INTO Instructor VALUES (0005, 'guru', 'Physics', 100000);

-- create
CREATE TABLE Teaches (
  ID INTEGER ,
  Course_Id VARCHAR(255) ,
  Sec_Id INTEGER ,
  semester TEXT ,
  year INTEGER,
  FOREIGN KEY (ID) REFERENCES Instructor(ID)
);
-- (currently there is no PRIMARY KEY for Teaches relation)

-- insert
INSERT INTO Teaches VALUES (0001, 'HIS-01', 1, 'fall', 2017);
INSERT INTO Teaches VALUES (0001, 'HIS-11', 1, 'Spring', 2018);
INSERT INTO Teaches VALUES (0002, 'HIS-11', 1, 'fall', 2017);
INSERT INTO Teaches VALUES (0003, 'PHY-01', 2, 'Summer', 2018);
INSERT INTO Teaches VALUES (0003, 'PHY-02', 2, 'fall', 2018);
INSERT INTO Teaches VALUES (0004, 'CHE-11', 3, 'Spring', 2018);
INSERT INTO Teaches VALUES (0005, 'PHY-11', 3, 'Summer', 2017);
-- (given inter datatype for the year)

SELECT * FROM Instructor ;
SELECT * FROM Teaches ;

-- Query3
INSERT INTO Instructor VALUES (0006, 'Smith', 'Biology', 66000);
SELECT * FROM Instructor ;

-- Query4
DELETE FROM Instructor
WHERE ID=0006;
SELECT * FROM Instructor ;

-- Query5
SELECT * FROM Instructor
WHERE dept_name='History';

-- Query6
SELECT *
FROM Instructor
CROSS JOIN Teaches;
-- (give different name for ID values in 2 TABLE while selecting)

-- Query7
SELECT Instructor.name, Teaches.Course_Id
FROM Instructor
CROSS JOIN Teaches;
-- (currently no features to manage the null values)

-- Query8
SELECT *
FROM Instructor
WHERE name LIKE '%dar%';

-- Query9
SELECT name
FROM Instructor
WHERE salary BETWEEN 90000 AND 100000;





-- Qn2

-- Query1
SELECT *
FROM Instructor
ORDER BY salary DESC;

-- Query2
SELECT Course_Id
FROM Teaches
WHERE (semester = 'fall' AND year = 2017)
   OR (semester = 'Spring' AND year = 2018);
   

-- Query3
SELECT Course_Id
FROM Teaches AS t1
WHERE semester = 'fall' AND year = 2017
AND EXISTS (
    SELECT 1
    FROM Teaches AS t2
    WHERE t1.Course_Id = t2.Course_Id
      AND t2.semester = 'Spring' AND t2.year = 2018
);

-- Query4
SELECT Course_Id
FROM Teaches
WHERE semester = 'fall' AND year = 2017
AND Course_Id NOT IN (
    SELECT Course_Id
    FROM Teaches
    WHERE semester = 'Spring' AND year = 2018
);
-- (check)

-- Query5
INSERT INTO Instructor VALUES (10211, 'Smith', 'Biology', 66000);
INSERT INTO Instructor VALUES (10212, 'Tom', 'Biology', null);
SELECT * FROM Instructor ;

-- Query6
SELECT * FROM Instructor
WHERE salary IS NULL;

-- Query7
SELECT AVG(salary) AS average_salary
FROM Instructor
WHERE dept_name = 'History';





-- Qn3

-- Query1
SELECT COUNT(DISTINCT ID) AS unique_id_count
FROM Teaches
WHERE semester = 'Spring' AND year = 2018;
-- (check)

-- Query2
SELECT COUNT(*) AS unique_id_count
FROM Teaches;
-- (check)

-- Query3
SELECT dept_name, AVG(salary) AS average_salary
FROM Instructor
GROUP BY dept_name;

-- Query4
SELECT dept_name, AVG(salary) AS average_salary
FROM Instructor
GROUP BY dept_name
HAVING AVG(salary) > 42000;

-- Query5 
SELECT name FROM INSTRUCTOR WHERE name NOT IN ('Mozart', 'Einstein');
-- query6
SELECT e.name FROM INSTRUCTOR e WHERE e.salary > ANY (SELECT salary FROM INSTRUCTOR WHERE dept_name = 'Biology');
-- query7
SELECT e.name FROM INSTRUCTOR e WHERE e.salary > ALL (SELECT salary FROM INSTRUCTOR WHERE dept_name = 'Biology');
-- Query8
SELECT dept_name, AVG(salary) AS avg_salary FROM INSTRUCTOR GROUP BY dept_name HAVING AVG(salary) > 42000; 


